local Api = {}

-- Upvalues for slight performance boost
local sub, find, split, remove, gsub, insert, match, tonumber = 
    string.sub, string.find, string.split, table.remove, string.gsub, table.insert, string.match, tonumber
local pcall, error, tostring = pcall, error, tostring
local assert = assert

-- Redefine httpget to use a more generic source
local httpget; do
    local game = game
    local oldhttpget = game.HttpGet
    httpget = function(url)
        local success, result = pcall(oldhttpget, game, url)
        if not success then
            return error("Failed to send GET request: " .. tostring(result))
        end
        return result
    end
end

local GameId = game.GameId
local BASEURL = "https://supremevaluelist.com/mm2/"
local categories = {
    "godly", "vintage", "legendary", "rare", "uncommon", "common", "pet", "misc"
}

-- General configuration for the game-specific setups
if GameId == 66654135 then -- Example for Murder Mystery
    Api.Game = "MurderMystery2"
    local ValuePattern = "<div class='item-value'>(%d+)</div>"
    
    function Api.refresh(self)
        assert(self == Api, "Use colon notation. Try self:refresh()")

        local Values = {}
        for _, category in ipairs(categories) do
            local url = BASEURL .. category
            local body = httpget(url)
            
            -- Capture value patterns
            for value in body:gmatch(ValuePattern) do
                local numericValue = tonumber(value)
                if numericValue then
                    Values[category:upper()] = numericValue
                end
            end
        end

        self.Values = Values
        return Values
    end
elseif GameId == 142553158 then -- Example for Assassin
    Api.Game = "Assassin"
    local URL = "https://supremevaluelist.com/assassin/"
    local ValuePattern = "<div class='knife-value'>(%d+)</div>"

    function Api.refresh(self)
        assert(self == Api, "Use colon notation. Try self:refresh()")

        local body = httpget(URL)
        local Values = {}

        for value in body:gmatch(ValuePattern) do
            local numericValue = tonumber(value)
            if numericValue then
                Values["KNIFE"] = numericValue
            end
        end

        self.Values = Values
        return Values
    end
else
    return error("[UniversalValueApi] Unsupported game. Current GameId: " .. tostring(GameId))
end

-- Calculation and formatting functions remain unchanged
function Api.calculate(self, items)
    assert(self == Api, "Use colon notation. Try self:calculate(items)")
    assert(type(items) == "table", "Expected 'table' for items, got " .. type(items))

    local totalValue = 0
    for item, amount in pairs(items) do
        local itemValue = self.Values[item:upper()]
        if itemValue then
            totalValue = totalValue + itemValue * math.max(0, amount)
        else
            warn("Item '" .. item .. "' was not found in values.")
        end
    end
    return totalValue
end

function Api.format(self, number)
    assert(self == Api, "Use colon notation. Try self:format(number)")
    assert(type(number) == "number", "Expected 'number' for number, got " .. type(number))
    
    local formatted = tostring(number):reverse():gsub("(%d%d%d)", "%1,"):reverse()
    return formatted:sub(1, 1) == "," and formatted:sub(2) or formatted
end

Api:refresh()
shared.UniversalValueApi = Api
return Api
